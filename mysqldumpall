#!/usr/bin/perl
#===============================================================================
#
# NAME
#     mysqldumpall - dump all you databases and grants in a semi sane way
#
# SYNOPSIS
#     mysqldumpall [--rsnapshot] [-o=<backup output folder>] [--help|usage]
#     [-z|--compress] [--time_fmt=<strftime format>] [-f|--config=<config
#     file>]
#
# DESCRIPTION
#     mysqldumpall is meant as a non-interactive mysql dumping tool
#
# OPTIONS AND CONFIG
#     * [ --help | --usage ]
#         Show some help/usage information
#
#     * [ --rsnapshot ]
#         configfile option: rsnapshot
#
#         Create a timestamp free dump suitable for e.g. rsnapshot use.
#
#     * [ -o=<directory> ]
#         configfile option: backup_folder
#
#         Select a different backup folder
#
#     * [ -z | --compress ]
#         configfile option: compress
#
#         Compress the output files
# 
#     * [ --extendedinsert | --noextendedinsert ]
#         configfile option: extended-insert
# 
#         Turn on/off extended insert dumps (default is on)
# 
#     * [ --time_fmt=<string> ]
#         configfile option: time_fmt
#
#         Altername timestamp for the filename.
#
#     * [ -f | --config=<string> ]
#         Select a different configfile
#
#   EXAMPLE CONFIG
#       [main]
#       rsnapshot = yes
#       compress = yes
#       time_fmt = %Y-%m-%d
#       backup_folder = /var/backups
#       extended-insert = no
#
#       [database]
#       user = root
#       password = g0dm0d3
#       host = localhost
#
# SEE ALSO
#
#     http://mysqldumpall.sourceforge.net/ <homepage>
#
#     MySQL grants dump code used from Beat Vontobel
#     <http://forge.mysql.com/snippets/view.php?id=12>
#
# AUTHOR
#     John van Zantvoort, <snl.jydawg AT G mail.com>
#
# CREATED
#     09/09/2007 11:40:36 AM CEST
#
#===============================================================================

use strict;
use warnings;
use DBI;
use POSIX qw( strftime );
use Sys::Syslog;
use Data::Dumper;
use Getopt::Long;

# CONSTANTS
my $dsn           = "dbi:mysql:dbname=mysql";

# VARIABLES
my $rsnapshot = undef; # create an rsnapshot compliant backup
my $mycnf_file;
my $backup_folder;
my $help;
my $compress;
my $time_fmt;
my %config;
my $user;
my $password;
my $dbh;
my $ext;
my $extendedinsert = 1; # default is on

my $mysqldump_command = '@MYSQLDUMP@';
my $mysqldump_opts    = "--quote-names --lock-tables --flush-logs --complete-insert --add-drop-table";
my $compress_command = '@GZIP@';

#===  FUNCTION  ================================================================
#         NAME:  read_ini
#  DESCRIPTION:  reads a config file and returns a referenced hash of the
#                contents
# PARAMETER  1:  <file name>
#      RETURNS:  <hash>
#===============================================================================
sub read_ini {
        my( $file ) = @_;
        local $/ = undef;
        my %retv;
        my $ns   = '_';
        unless( open( CFG, $file ) ) {
                die( "read_ini: cannot open file: $file, $!" );
        }
        my $contents = <CFG>;
        close( CFG );

        foreach ( split /(?:\015{1,2}\012|\015|\012)/, $contents ) {
                next if /^\s*(?:\#|\;|$)/;
                if ( /^\s*\[(.+?)\]\s*$/ ) { $ns = $1; next; }
                if ( /^\s*([^=]+?)\s*=\s*(.*?)\s*$/ ) {
                        $retv{ $ns }{ $1 } = $2;
                        next;
                }
        }
        return( %retv );
}

#===  FUNCTION  ================================================================
#         NAME:  SystemWithCheck
#  DESCRIPTION:  does a 'system' call with a bunch of checks
# PARAMETER  1:  a list of the command that is supposed to be executed
#      RETURNS:  1 if all when well undef if not
#===============================================================================
sub SystemWithCheck {
        my @cmnd = @_;
        my $msg_string = join( " ", "SystemWithCheck", @cmnd );
        if( system( @cmnd ) != 0 ) {
                if( $? == -1 ) {
                        syslog( 'err', "%s: failed to execute: %m", $msg_string );
                } elsif( $? & 127 ) {
                        syslog( 'err', '%s: %s',
                                sprintf( "%s: child died with signal %d, %s coredump",
                                $msg_string, ($? & 127), ($? & 128) ? 'with' : 'whitout' ) );
                } else {
                        syslog( 'notice', '%s: child exited with value %d', $msg_string, $? >> 8 );
                }
                return ( undef );
        } else {
                return ( 1 );
        }
}

#===  FUNCTION  ================================================================
#         NAME:  dumpgrants
#  DESCRIPTION:  dump's the grants to a file
# PARAMETER  1:  <database object>
# PARAMETER  2:  <output file>
#      RETURNS:  nada
#===============================================================================
sub dumpgrants {
	my( $dbh, $outputfile ) = @_;

	unless( open( GRANTS, ">${outputfile}" ) ) {
		die "Cannot open ${outputfile}: $!\n";
	}

	if(my $info = $dbh->selectrow_arrayref("SELECT NOW(), VERSION()")) {
		print GRANTS "-- Grants extracted by $0\n";
		print GRANTS "-- ${$info}[0] (MySQL ${$info}[1])\n\n";
	} else {
		die($dbh->errstr."\n");
	}

	my $userQuery  = $dbh->prepare("SELECT user, host FROM mysql.user ORDER BY user, host");
	my $grantQuery = $dbh->prepare("SHOW GRANTS FOR ?@?");

	$userQuery->execute() or die($dbh->errstr."\n");

	while(my $ud = $userQuery->fetchrow_arrayref()) {
		print GRANTS "-- ${$ud}[0]\@${$ud}[1]\n";
		if($grantQuery->execute(${$ud}[0], ${$ud}[1])) {
			while(my $grant = $grantQuery->fetchrow_arrayref) {
				print GRANTS ${$grant}[0];
				print GRANTS ";\n";
			}
		} else {
			print GRANTS "-- Error: Couldn't execute SHOW GRANTS (".$dbh->errstr.")\n";
			syslog( 'err', "Error: Couldn't execute SHOW GRANTS (%s)", $dbh->errstr );
		}
		print GRANTS "\n";
	}
	close( GRANTS );
}

#===  FUNCTION  ================================================================
#         NAME:  mysqldump
#  DESCRIPTION:  does the actual dumping
# PARAMETER  1:  <username>
# PARAMETER  2:  <password>
# PARAMETER  3:  <database>
# PARAMETER  4:  <output>
# PARAMETER  5:  <mysqldump options>
#      RETURNS:  1 for oke, undef for not oke
#===============================================================================
sub mysqldump {
	my( $user, $password, $database, $output, $dump_opts ) = @_;

	my $command = "$mysqldump_command $dump_opts";
	$command .= " -u${user} -p${password} --result-file=\"${output}\"";
	$command .= " ${database}";

	unless( SystemWithCheck( $command ) ) {
		syslog( 'err', "Backup of $database failed" );
		return undef;
	}
	return 1;
}

#===  FUNCTION  ================================================================
#         NAME:  compress
#  DESCRIPTION:  compresses files
# PARAMETER  1:  <filename>
#      RETURNS:  1 for oke, undef for not oke
#===============================================================================
sub compress {
	my $file = shift;
	if( -f "${file}.gz" ) {
		unless( unlink( "${file}.gz" ) ) {
			syslog( 'err', "Failed to remove ${file}.gz" );
		}
	}

	my $command = "$compress_command $file";
	unless( SystemWithCheck( $command ) ) {
		syslog( 'err', "Failed to compress $file" );
		return undef;
	}
	return 1;
}

#===  FUNCTION  ================================================================
#         NAME:  help
#  DESCRIPTION:  help?
# PARAMETER  1:  none
#      RETURNS:  nada
#===============================================================================
sub help {
	print "USAGE:\n";
	print "\t$0 [--rsnapshot] [-o=<backup output folder>] [--help|usage]\n";
	print "\t\t [-z|--compress] [--time_fmt=<strftime format>]\n";
	print "\t\t [ --extendedinsert | --noextendedinsert ]\n";
	print "\t\t [-f|--config=<config file>]\n\n";
	exit;
}

#
# Main
#

GetOptions (
	'rsnapshot'  => \$rsnapshot,
	'o=s'        => \$backup_folder,
	'help|usage' => \$help,
	'z|compress' => \$compress,
	'time_fmt=s' => \$time_fmt,
	'extendedinsert!' => \$extendedinsert,
	'f|config=s' => \$mycnf_file
);

help if( $help );
$mycnf_file    = $mycnf_file ? $mycnf_file : '@CONFIG_FOLDER@/mysqldumpall.cfg';
%config        = read_ini( $mycnf_file );
$user          = $config{'database'}{'user'};
$password      = $config{'database'}{'password'};

# if the command line is not used but
# there is an entry in the config file
# check it.
# --------------------------------------
if( ! $rsnapshot ) {
	if(
		( exists $config{ 'main' }{ 'rsnapshot' } ) &&
		( $config{ 'main' }{ 'rsnapshot' } =~ /(on|yes|1)/i )
	) {
		$rsnapshot = 1;
	}
}

# check if we need to compress the
# output
# --------------------------------------
if( ! $compress ) {
	if(
		( exists $config{ 'main' }{ 'compress' } ) &&
		( $config{ 'main' }{ 'compress' } =~ /(on|yes|1)/i )
	) {
		$compress = 1;
	}
}

# Select an output folder
# --------------------------------------
if( ! $backup_folder ) {
	if( exists $config{ 'main' }{ 'backup_folder' } ) {
		$backup_folder = $config{ 'main' }{ 'backup_folder' };
	}
} else {
	$backup_folder = '/var/backups';

}

if( ! -d "$backup_folder" ) {
	print "ERROR: Backup folder \"$backup_folder\" does not exist\n";
	exit;
}


# See if we have a time string
# --------------------------------------
if( ! $time_fmt ) {
	if( exists $config{ 'main' }{ 'time_fmt' } ) {
		$time_fmt = $config{ 'main' }{ 'time_fmt' };
	}
	if( $time_fmt !~ /\%/ ) {
		print "ERROR: Backup timeformat \"$time_fmt\" is not valid\n";
		exit;
	}
}

# turn on/off extended-insert 
# --------------------------------------
if(
	( ! $extendedinsert ) ||
	(
		( exists $config{ 'main' }{ 'extended-insert' } ) &&
		( $config{ 'main' }{ 'extended-insert' } =~ /(no|off|false)/i )
	)
) {
	$mysqldump_opts = " --skip-extended-insert $mysqldump_opts";
}

# add the optional time string
# --------------------------------------
if( ! $rsnapshot ) {
	$ext = strftime( $time_fmt, localtime( time() ) );
	$ext .= ".";

}
$ext .= 'sql';

$dbh = DBI->connect( $dsn, $user, $password, { RaiseError => 1 });

if( ! $dbh ) {
	syslog( 'err', "database failed to initialize: %s", $DBI::errstr );
}

#
# Dump the mysql grants
# --------------------------------------
dumpgrants( $dbh, "${backup_folder}/grants.${ext}" );

compress( "${backup_folder}/grants.${ext}"  ) if( $compress );

#
# Get a list of the databases
# --------------------------------------
my $sth = $dbh->prepare( "SHOW DATABASES" );

$sth->execute();

while( my $row = $sth->fetchrow_hashref() ) {
	my $Database = $row->{'Database'};
	next if(
		( $Database =~ /mysql/ ) ||
		( $Database =~ /information_schema/ )
	);
	my $output = "${backup_folder}/${Database}.${ext}";

	unless( mysqldump( $user, $password, $Database, $output, $mysqldump_opts ) ) {
		next;
	}

	compress( $output ) if( $compress );
}

$dbh->disconnect;

__END__

=head1 NAME

mysqldumpall - dump all you databases and grants in a semi sane way

=head1 SYNOPSIS

B<mysqldumpall> [--rsnapshot] [-o=E<lt>backup output folderE<gt>] [--help|usage]
[-z|--compress] [--time_fmt=E<lt>strftime formatE<gt>] [-f|--config=E<lt>config fileE<gt>]

=head1 DESCRIPTION

B<mysqldumpall> is meant as a non-interactive mysql dumping tool. It can be used
to keep an archive of "past versions" or to use in combination with e.g.
rsnapshot. It's a Q&D script so no doubt it can be revamped thoroughly.

=head1 OPTIONS AND CONFIG

=over 4

=item * [ --help | --usage ]

Show some help/usage information

=item * [ --rsnapshot ]

configfile option: B<rsnapshot>

Create a timestamp free dump suitable for e.g. rsnapshot use.

=item * [ -o=<directory> ]

configfile option: B<backup_folder>

Select a diffrent backup folder

=item * [ -z | --compress ]

configfile option: B<compress>

Compress the output files

=item * [ --time_fmt=<string> ]

configfile option: B<time_fmt>

Altername timestamp for the filename.

=item * [ --extendedinsert | --noextendedinsert ]

configfile option: B<extended-insert>

Turn on/off extended insert dumps (default is on)

=item * [ -f | --config=E<lt>stringE<gt> ]

Select a diffrent configfile (default: F<@CONFIG_FOLDER@/mysqldumpall.cfg>)

=back

=head2 EXAMPLE CONFIG

  [main]
  rsnapshot = yes
  compress = yes
  time_fmt = %Y-%m-%d
  backup_folder = /var/backups
  extended-insert = no
  
  [database]
  user = root
  password = g0dm0d3
  host = localhost


=head1 SEE ALSO

L<date>

http://mysqldumpall.sourceforge.net/ E<lt>homepageE<gt>

MySQL grants dump code used from Beat Vontobel
L<http://forge.mysql.com/snippets/view.php?id=12>

=head1 AUTHOR

John van Zantvoort, E<lt>snl.jydawg AT G mail.comE<gt>


=cut


# overwritten.
